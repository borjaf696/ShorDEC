           Graph_l local_graph;
            vertex_graph v1 = boost::add_vertex(NodeInfo(_g[*v].node, 0),local_graph);
            vertex_graph v2 = boost::add_vertex(NodeInfo(_g[*v].node, 1),local_graph);
            vertex_graph v3 = boost::add_vertex(NodeInfo(_g[*v].node, 2),local_graph);
            vertex_graph v4 = boost::add_vertex(NodeInfo(_g[*v].node, 3),local_graph);
            boost::add_edge(v1,v2,local_graph);boost::add_edge(v1,v3,local_graph);boost::add_edge(v1,v4,local_graph);
            boost::add_edge(v2,v4,local_graph);boost::add_edge(v3,v4,local_graph);
            vector<vector<vertex_graph>> output = findMaxClique<Graph_l, vertex_graph,vertex_it>(local_graph);
            while (boost::num_edges(local_graph)) {
                for (auto clique: output)
                {
                    for (size_t i = 0; i < clique.size(); ++i)
                    {
                        for (size_t j = i + 1; j < clique.size(); ++j) {
                            cout << local_graph[clique[i]].id << " " << local_graph[clique[j]].id << " ";
                            boost::remove_edge(clique[i], clique[j], local_graph);
                        }
                    }
                    cout << "\n";
                }
                output = findMaxClique<Graph_l, vertex_graph, vertex_it>(local_graph);
            }
            std::cout << "\n";
            sleep(10000);
