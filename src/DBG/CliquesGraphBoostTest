 /*
             * Graph for cliques -> bron kerbosch (esto voy a tener que revisarlo pero bien)
             */
            map<vertex_t, size_t> map_nodes;
            typedef boost::adjacency_list<boost::listS, boost::listS, boost::undirectedS, NodeInfo> Graph_l;
            typedef Graph_l::vertex_descriptor vertex_graph;
            typedef Graph_l::vertex_iterator vertex_it;
            Graph_l g_l;
            vertex_graph v1 = boost::add_vertex(NodeInfo(_g[*v].node, 0),g_l);
            vertex_graph v2 = boost::add_vertex(NodeInfo(_g[*v].node, 1),g_l);
            vertex_graph v3 = boost::add_vertex(NodeInfo(_g[*v].node, 2),g_l);
            vertex_graph v4 = boost::add_vertex(NodeInfo(_g[*v].node, 3),g_l);
            boost::add_edge(v1,v2,g_l);boost::add_edge(v1,v3,g_l);boost::add_edge(v1,v4,g_l);boost::add_edge(v2,v3,g_l);
            boost::add_edge(v3,v4,g_l);
            vector<vertex_graph> output = findMaxClique<Graph_l, vertex_graph,vertex_it>(g_l);
            while (boost::num_edges(g_l)) {
                for (size_t i = 0; i < output.size(); ++i)
                    for (size_t j = i + 1; j < output.size(); ++j) {
                        cout << g_l[output[i]].id << " " << g_l[output[j]].id << "\n";
                        boost::remove_edge(output[i], output[j], g_l);
                    }
                output = findMaxClique<Graph_l, vertex_graph, vertex_it>(g_l);
                for (auto i:output)
                    cout << g_l[i].id << "\n";
            }
